import React, { useEffect, useState } from 'react';
import useApi from '../../../../hooks/useApi';
import './AdminProduct.css';
import { Circles } from 'react-loader-spinner';
import Modal from 'react-modal';
import Swal from 'sweetalert2';
import { useSelector, useDispatch } from 'react-redux';
import { addProduct } from './../../../../cartSlice'; 

Modal.setAppElement('#root');

function AdminProduct() {
  const dispatch = useDispatch();
  const cartItems = useSelector((state) => state.products);
  const isLoading = useSelector((state) => state.products.loading); 
  const { axiosInstance } = useApi();
  const [products, setProducts] = useState([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    quantity: '',
    image: null,
  });

  const getProducts = async () => {
    try {
      const response = await axiosInstance.get('products');
      dispatch(addProduct(response.data)); 
      console.log('Redux products ==:', cartItems);
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };

  useEffect(() => {
    getProducts();
  }, []);

  const handleDelete = async (id) => {
    try {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'You will not be able to recover this product!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
      });

      if (result.isConfirmed) {
        await axiosInstance.delete(`/products/${id}`);
        setProducts(products.filter(product => product.id !== id));
        Swal.fire('Deleted!', 'Your product has been deleted.', 'success');
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      Swal.fire('Error!', 'There was a problem deleting the product.', 'error');
    }
  };

  const handleUpdate = (product) => {
    setCurrentProduct(product);
    setFormData({
      name: product.name,
      description: product.description,
      price: product.price,
      quantity: product.quantity,
      image: null,
    });
    setIsEditMode(true);
    setModalIsOpen(true);
  };

  const handleModalClose = () => {
    setModalIsOpen(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    setFormData((prev) => ({ ...prev, image: e.target.files[0] }));
    console.log(e.target.files[0]);
  };

  const handleAdd = () => {
    setFormData({
      name: '',
      description: '',
      price: '',
      quantity: '',
      image: null,
    });
    setIsEditMode(false);
    setModalIsOpen(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const form = new FormData();
    form.append('name', formData.name);
    form.append('description', formData.description);
    form.append('price', formData.price);
    form.append('quantity', formData.quantity);
    if (formData.image) {
      form.append('image', formData.image);
    }

    const config = {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    };

    try {
      if (isEditMode) {
        await axiosInstance.put(`/products/${currentProduct.id}`, form, config);
        setProducts(products.map(product =>
          product.id === currentProduct.id ? { ...product, ...formData } : product
        ));
        Swal.fire('Updated!', 'Your product has been updated.', 'success');
      } else {
        const response = await axiosInstance.post('/addproduct', form, config);
        setProducts([...products, response.data]);
        Swal.fire('Added!', 'Your product has been added.', 'success');
      }
      handleModalClose();
    } catch (error) {
      console.error('Error saving product:', error);
      Swal.fire('Error!', 'There was a problem saving the product.', 'error');
    }
  };

  return (
    <div className="admin-product-container">
      {isLoading ? (
        <div className="loader">
          <Circles
            height="100"
            width="100"
            color="#4fa94d"
            ariaLabel="circles-loading"
            visible={true}
          />
        </div>
      ) : (
        <div className="product-cards">
          <button className="add-product-button" onClick={handleAdd}>Add Product</button>
          {cartItems.length === 0 ? (
            <p className="no-products-message">No products found</p>
          ) : (
            cartItems.map(product => (
              <div key={product.id} className="product-card">
                <div className="product-details">
                  <h3>{product.name}</h3>
                  <p>Price: ${product.price}</p>
                  <p>Quantity: {product.quantity}</p>
                  <div className="product-actions">
                    <button className="view-button" onClick={() => handleUpdate(product)}>View</button>
                    <button className="update-button" onClick={() => handleUpdate(product)}>Update</button>
                    <button className="delete-button" onClick={() => handleDelete(product.id)}>Delete</button>
                  </div>
                </div>
                <img
                  src={`http://localhost:3000${product.image}`}
                  alt={product.name}
                  className="product-image"
                />
              </div>
            ))
          )}
        </div>
      )}

      <Modal
        isOpen={modalIsOpen}
        onRequestClose={handleModalClose}
        contentLabel={isEditMode ? "Update Product" : "Add Product"}
        className="modal"
        overlayClassName="overlay"
      >
        <div className="modal-header">
          <h2>{isEditMode ? 'Update Product' : 'Add Product'}</h2>
          <button className="close-button" onClick={handleModalClose}>&times;</button>
        </div>
        <form onSubmit={handleSubmit} className="modal-body">
          <label>
            Name:
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Description:
            <input
              type="text"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Price:
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Quantity:
            <input
              type="number"
              name="quantity"
              value={formData.quantity}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Image:
            <input
              type="file"
              name="image"
              onChange={handleFileChange}
            />
          </label>
          <div className="modal-footer">
            <button type="submit" className="confirm-button">{isEditMode ? 'Update' : 'Add'}</button>
            <button type="button" className="cancel-button" onClick={handleModalClose}>Cancel</button>
          </div>
        </form>
      </Modal>
    </div>
  );
}

export default AdminProduct;
